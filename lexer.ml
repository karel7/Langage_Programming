# 1 "lexer.mll"
 
  open Lexing
  (*open Parser*)

  exception Lexing_error of string

  type token = CST of int
              | IDENT of string
              | PLUS | MINUS | TIMES | DIV | MOD
              | LEFTPAR | RIGHTPAR | BEGIN | END | COMMA | SEMICOLON
              | FUN | ELSE | FALSE | IF | LET | MUT | RETURN | STRUCT | TRUE | WHILE
              | ASSIGN | OR | AND
              | EQUAL | GQ | GEQ | LQ | LEQ | NE | EOF
              | EXCL | QUO
  let table_kw =
  ["fn",FUN;
   "else",ELSE;
   "false",FALSE;
   "if",IF;
   "let",LET;
   "mut",MUT;
   "return",RETURN;
   "struct",STRUCT;
   "true",TRUE;
   "while",WHILE;
   "print",PRINT;
   "vec",VEC]

   let assoc_variable s = try List.assoc s table_kw with Not_found -> IDENT (s)

# 33 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\226\255\227\255\001\000\231\255\001\000\002\000\235\255\
    \236\255\237\255\238\255\239\255\240\255\241\255\243\255\001\000\
    \245\255\003\000\030\000\031\000\033\000\079\000\004\000\089\000\
    \255\255\048\000\002\000\251\255\250\255\249\255\247\255\228\255\
    \233\255\232\255\230\255\146\000\147\000\148\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\029\000\255\255\029\000\029\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000\
    \255\255\009\000\007\000\026\000\021\000\003\000\002\000\001\000\
    \255\255\013\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\025\000";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\036\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\036\000\036\000\036\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\024\000\000\000\024\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\019\000\003\000\034\000\022\000\013\000\005\000\033\000\
    \012\000\011\000\014\000\016\000\008\000\015\000\000\000\025\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\004\000\007\000\017\000\020\000\018\000\031\000\
    \030\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\029\000\028\000\035\000\027\000\026\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\010\000\006\000\009\000\032\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\037\000\034\000\034\000\000\000\
    \023\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
    \035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\026\000\022\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\003\000\022\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\018\000\019\000\003\000\020\000\025\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\035\000\036\000\037\000\255\255\
    \023\000\255\255\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\035\000\036\000\
    \037\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\003\000\026\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\035\000\036\000\037\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 42 "lexer.mll"
            ( new_line lexbuf; token lexbuf )
# 178 "lexer.ml"

  | 1 ->
let
# 43 "lexer.mll"
             t
# 184 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 43 "lexer.mll"
               ( assoc_variable t )
# 188 "lexer.ml"

  | 2 ->
# 44 "lexer.mll"
           (token lexbuf)
# 193 "lexer.ml"

  | 3 ->
let
# 45 "lexer.mll"
              t
# 199 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "lexer.mll"
                (CST (int_of_string t))
# 203 "lexer.ml"

  | 4 ->
# 46 "lexer.mll"
         (EQUAL)
# 208 "lexer.ml"

  | 5 ->
# 47 "lexer.mll"
         (NE)
# 213 "lexer.ml"

  | 6 ->
# 48 "lexer.mll"
         (GEQ)
# 218 "lexer.ml"

  | 7 ->
# 49 "lexer.mll"
        (GQ)
# 223 "lexer.ml"

  | 8 ->
# 50 "lexer.mll"
         (LEQ)
# 228 "lexer.ml"

  | 9 ->
# 51 "lexer.mll"
        (LQ)
# 233 "lexer.ml"

  | 10 ->
# 52 "lexer.mll"
        (PLUS)
# 238 "lexer.ml"

  | 11 ->
# 53 "lexer.mll"
        (MINUS)
# 243 "lexer.ml"

  | 12 ->
# 54 "lexer.mll"
        (TIMES)
# 248 "lexer.ml"

  | 13 ->
# 55 "lexer.mll"
        (DIV)
# 253 "lexer.ml"

  | 14 ->
# 56 "lexer.mll"
        (MOD)
# 258 "lexer.ml"

  | 15 ->
# 57 "lexer.mll"
        (LEFTPAR)
# 263 "lexer.ml"

  | 16 ->
# 58 "lexer.mll"
        (RIGHTPAR)
# 268 "lexer.ml"

  | 17 ->
# 59 "lexer.mll"
        (BEGIN)
# 273 "lexer.ml"

  | 18 ->
# 60 "lexer.mll"
        (END)
# 278 "lexer.ml"

  | 19 ->
# 61 "lexer.mll"
        (COMMA)
# 283 "lexer.ml"

  | 20 ->
# 62 "lexer.mll"
        (SEMICOLON)
# 288 "lexer.ml"

  | 21 ->
# 63 "lexer.mll"
        (ASSIGN)
# 293 "lexer.ml"

  | 22 ->
# 64 "lexer.mll"
         (OR)
# 298 "lexer.ml"

  | 23 ->
# 65 "lexer.mll"
         (AND)
# 303 "lexer.ml"

  | 24 ->
# 66 "lexer.mll"
        (COLON)
# 308 "lexer.ml"

  | 25 ->
let
# 67 "lexer.mll"
                       t
# 314 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 67 "lexer.mll"
                              (CHAIN(t))
# 318 "lexer.ml"

  | 26 ->
# 68 "lexer.mll"
        (EXCL)
# 323 "lexer.ml"

  | 27 ->
# 69 "lexer.mll"
         (IMPLY)
# 328 "lexer.ml"

  | 28 ->
# 70 "lexer.mll"
        (EOF)
# 333 "lexer.ml"

  | 29 ->
let
# 71 "lexer.mll"
         t
# 339 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 71 "lexer.mll"
           (raise (Lexing_error (String.make 1 t)))
# 343 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;



** Conflict (shift/reduce) in state 37.
** Token involved: PRINT
** This state is reached from prog after reading:

FUN IDENT LEFTPAR loption(separated_nonempty_list(COMMA,argument)) BEGIN instruction 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(decl) EOF 
decl list(decl) 
FUN IDENT LEFTPAR loption(separated_nonempty_list(COMMA,argument)) block 
                                                                   (?)

** In state 37, looking ahead at PRINT, shifting is permitted
** because of the following sub-derivation:

BEGIN list(instruction) expr END 
      instruction list(instruction) 
                  instruction list(instruction) 
                  expr SEMICOLON 
                  . PRINT EXCL LEFTPAR CHAIN RIGHTPAR 

** In state 37, looking ahead at PRINT, reducing production
** list(instruction) -> 
** is permitted because of the following sub-derivation:

BEGIN list(instruction) expr END // lookahead token appears because expr can begin with PRINT
      instruction list(instruction) // lookahead token is inherited
                  . 

** Conflict (shift/reduce) in state 27.
** Token involved: PRINT
** This state is reached from prog after reading:

FUN IDENT LEFTPAR loption(separated_nonempty_list(COMMA,argument)) BEGIN 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
list(decl) EOF 
decl list(decl) 
FUN IDENT LEFTPAR loption(separated_nonempty_list(COMMA,argument)) block 
                                                                   (?)

** In state 27, looking ahead at PRINT, shifting is permitted
** because of the following sub-derivation:

BEGIN list(instruction) expr END 
      instruction list(instruction) 
      expr SEMICOLON 
      . PRINT EXCL LEFTPAR CHAIN RIGHTPAR 

** In state 27, looking ahead at PRINT, reducing production
** list(instruction) -> 
** is permitted because of the following sub-derivation:

BEGIN list(instruction) expr END // lookahead token appears because expr can begin with PRINT
      . 
